[project]
name = "pastalinkbot"
version = "0.1.0"
description = "A Telegram bot that helps users quickly find official links for Italian public services"
authors = [{ name = "Luigi Aiello", email = "luigiaiello97@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "python-telegram-bot==21.6",
    "python-dotenv>=1.0.0",
    "requests>=2.32.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

lint = ["black>=23.0.0", "isort>=5.12.0", "flake8>=6.0.0", "mypy>=1.5.0"]

[project.urls]
Homepage = "https://github.com/yourusername/pastalinkbot"
Repository = "https://github.com/yourusername/pastalinkbot"
Documentation = "https://github.com/yourusername/pastalinkbot#readme"
Issues = "https://github.com/yourusername/pastalinkbot/issues"

[project.scripts]
pastalinkbot = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "config*", "utils*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.mo", "*.po"]

# ============================================================================
# BLACK - Code Formatter Configuration
# ============================================================================
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | env
  | _build
  | buck-out
  | build
  | dist
)/
'''

# ============================================================================
# ISORT - Import Sorting Configuration
# ============================================================================
[tool.isort]
profile = "black"
line_length = 100
skip = [".venv", "venv", "env", "__pycache__", "build", "dist"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["config", "core", "utils"]
known_third_party = ["telegram", "requests", "dotenv"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ============================================================================
# MYPY - Type Checking Configuration
# ============================================================================
# [tool.mypy]
# exclude = [".venv", "venv", "env", "__pycache__", "build", "dist"]
# python_version = "3.9"
# warn_return_any = true
# warn_unused_configs = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_no_return = true
# warn_unreachable = true
# strict_optional = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# check_untyped_defs = true
# disallow_untyped_decorators = true
# no_implicit_optional = true
# show_error_codes = true
# show_column_numbers = true
# pretty = true

# # Ignore missing imports for third-party libraries without type stubs
# [[tool.mypy.overrides]]
# module = [
#     "telegram.*",
#     "requests.*",
#     "dotenv.*",
# ]
# ignore_missing_imports = true

# # Be less strict with test files
# [[tool.mypy.overrides]]
# module = "tests.*"
# disallow_untyped_defs = false
# disallow_incomplete_defs = false

# ============================================================================
# PYLINT - Comprehensive Linting Configuration
# ============================================================================
[tool.pylint]
ignore = [".venv", "venv", "env", "__pycache__", "build", "dist"]
load-plugins = ["pylint.extensions.docparams", "pylint.extensions.docstyle"]

[tool.pylint.messages_control]
disable = [
    "C0114", # missing-module-docstring (we have good module docstrings)
    "R0903", # too-few-public-methods (data classes are fine)
    "R0913", # too-many-arguments (sometimes necessary)
    "C0103", # invalid-name (allow single letter variables in specific contexts)
    "W0613", # unused-argument (common in async handlers)
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 50
max-parents = 7
max-attributes = 15
min-public-methods = 1
max-public-methods = 25

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true

# ============================================================================
# PYTEST - Testing Configuration
# ============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

# ============================================================================
# BANDIT - Security Linting Configuration
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101"]                        # Skip assert_used test since we use asserts in tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
